from django.contrib import admin
from django.contrib import admin
from django import forms
from django.contrib.admin import AdminSite
from .models import MealRecord, Student, ClassRoom, StudentPayment,MealPrice
from django.contrib.auth.models import User, Group
from django.contrib.auth.admin import UserAdmin, GroupAdmin
from django.http import HttpResponse, HttpResponseRedirect
from django.template.response import TemplateResponse
from django.urls import path
from django.contrib import messages
from openpyxl import Workbook, load_workbook
import csv
from django.urls import reverse
admin.site.site_header  = "Trang qu·∫£n tr·ªã b·ªØa ƒÉn h·ªçc sinh"
admin.site.site_title   = "Qu·∫£n l√Ω b·ªØa ƒÉn"
admin.site.index_title  = "B·∫£ng ƒëi·ªÅu khi·ªÉn"

class MealPriceAdmin(admin.ModelAdmin):
    list_display  = ('effective_date', 'daily_price', 'breakfast_price', 'lunch_price')
    list_editable = ('daily_price', 'breakfast_price', 'lunch_price')
    list_filter   = ('effective_date',)
    ordering      = ('-effective_date',)
class StudentInline(admin.TabularInline):
    model = Student
    extra = 0                 # kh√¥ng sinh form tr·ªëng
    fields = ('name',)        # ch·ªâ hi·ªán t√™n (c√≥ th·ªÉ th√™m c√°c field kh√°c)
    show_change_link = True   # c√≥ link v√†o form edit c·ªßa t·ª´ng student
class MyAdminSite(AdminSite):
    site_header = "Trang qu·∫£n tr·ªã b·ªØa ƒÉn h·ªçc sinh"
    index_title = "B·∫£ng ƒëi·ªÅu khi·ªÉn"

    def index(self, request, extra_context=None):
        extra_context = extra_context or {}
        # ƒê·ªï nhanh 2 link v√†o dashboard
        extra_context['quick_links'] = [
            {
                'url': reverse('meals:statistics'),
                'label': 'üìä Th·ªëng k√™'
            },
            {
                'url': reverse('meals:student_payment_edit'),
                'label': 'üí≥ Ch·ªânh s·ª≠a c√¥ng n·ª£'
            }
        ]
        return super().index(request, extra_context)

    # Tu·ª≥ √Ω b·∫°n c√≥ th·ªÉ override get_urls ƒë·ªÉ th√™m view custom,
    # nh∆∞ng ·ªü ƒë√¢y ch·ªâ c·∫ßn index.

class ClassNameFilter(admin.SimpleListFilter):
    title = 'L·ªõp h·ªçc'
    parameter_name = 'class_name'

    def lookups(self, request, model_admin):
        class_names = Student.objects.values_list('class_name', flat=True).distinct()
        return [(cls, cls) for cls in class_names if cls]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(class_name=self.value())
        return queryset
class StudentPaymentAdminForm(forms.ModelForm):
    class Meta:
        model = StudentPayment
        fields = '__all__'
        widgets = {
            # HTML5 month-picker
            'month': forms.TextInput(attrs={'type': 'month'}),
        }
class StudentPaymentAdmin(admin.ModelAdmin):
    form = StudentPaymentAdminForm
    list_display  = ('student','month','tuition_fee','meal_price','amount_paid','remaining_balance')
    search_fields = ('student__name','month')   # ‚Üê t√¨m theo t√™n h·ªçc sinh ho·∫∑c th√°ng
    list_filter   = ('month',)                  # filter th√™m theo th√°ng n·∫øu c·∫ßn
    verbose_name  = "C√¥ng n·ª£ h·ªçc sinh"
    verbose_name_plural = "C√¥ng n·ª£ h·ªçc sinh"
    def save_model(self, request, obj, form, change):
        """
        N·∫øu ƒë√£ c√≥ record c√πng student+month kh√°c pk n√†y,
        th√¨ c·∫≠p nh·∫≠t v√†o record ƒë√≥ thay v√¨ t·∫°o m·ªõi.
        """
        existing = StudentPayment.objects.filter(
            student=obj.student,
            month=obj.month
        ).exclude(pk=obj.pk).first()

        if existing:
            # Ghi ƒë√® c√°c tr∆∞·ªùng
            existing.tuition_fee    = obj.tuition_fee
            existing.meal_price     = obj.meal_price
            existing.amount_paid    = obj.amount_paid
            # g·ªçi save c·ªßa model ƒë·ªÉ t√≠nh remaining_balance
            existing.save()
            self.message_user(request, f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t b·∫£n ghi {existing.id} thay v√¨ t·∫°o m·ªõi.", level=messages.SUCCESS)
        else:
            super().save_model(request, obj, form, change)
class ClassRoomAdmin(admin.ModelAdmin):
    list_display = ('name',)
    search_fields = ('name',)
    inlines = [StudentInline]  
    verbose_name = "L·ªõp h·ªçc"
    verbose_name_plural = "C√°c l·ªõp h·ªçc"
    change_form_template = "admin/meals/classroom_change_form.html"

    def get_urls(self):
        urls = super().get_urls()
        custom = [
            path(
                '<int:classroom_id>/delete_students/',
                self.admin_site.admin_view(self.delete_students_view),
                name='meals_classroom_delete_students'
            ),
            path(
                '<int:classroom_id>/export_students/',
                self.admin_site.admin_view(self.export_students_view),
                name='meals_classroom_export_students'
            ),
            path(
                '<int:classroom_id>/import_students/',
                self.admin_site.admin_view(self.import_students_view),
                name='meals_classroom_import_students'
            ),
        ]
        # ƒê·∫∑t custom URLs l√™n tr∆∞·ªõc ƒë·ªÉ kh√¥ng b·ªã ch·∫∑n b·ªüi m·∫∑c ƒë·ªãnh
        return custom + urls
    def delete_students_view(self, request, classroom_id):
        room = ClassRoom.objects.get(pk=classroom_id)
        if request.method == 'POST':
            # x√≥a t·∫•t c·∫£ sinh vi√™n trong l·ªõp, cascades lu√¥n MealRecord & StudentPayment
            qs = Student.objects.filter(classroom=room)
            count, _ = qs.delete()
            self.message_user(request, f"ƒê√£ x√≥a {count} h·ªçc sinh (v√† d·ªØ li·ªáu li√™n quan) c·ªßa l·ªõp {room.name}.")
            return HttpResponseRedirect(f'../../{classroom_id}/change/')

        context = {
            **self.admin_site.each_context(request),
            'opts':    self.model._meta,
            'original': room,
            'title':   f'X√°c nh·∫≠n x√≥a to√†n b·ªô h·ªçc sinh l·ªõp ‚Äú{room.name}‚Äù',
        }
        return TemplateResponse(request, "admin/meals/classroom_delete_students_confirmation.html", context)
    
    def export_students_view(self, request, classroom_id):
        room = ClassRoom.objects.get(pk=classroom_id)
        qs = Student.objects.filter(classroom=room).order_by('name')

        # T·∫°o workbook v√† sheet
        wb = Workbook()
        ws = wb.active
        ws.title = 'H·ªçc sinh'

        # Header
        ws.append(['T√™n h·ªçc sinh'])

        # D·ªØ li·ªáu
        for s in qs:
            ws.append([s.name])

        # Xu·∫•t file .xlsx
        response = HttpResponse(
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        filename = f"students_{room.name}.xlsx"
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        wb.save(response)
        return response
    def import_students_view(self, request, classroom_id):
        room = ClassRoom.objects.get(pk=classroom_id)

        if request.method == 'POST':
            excel_file = request.FILES.get('excel_file')
            if not excel_file:
                self.message_user(request, "‚ö†Ô∏è Ch∆∞a ch·ªçn file Excel.", level=messages.ERROR)
                return HttpResponseRedirect(request.path)

            # ƒê·ªçc workbook
            wb = load_workbook(filename=excel_file, read_only=True, data_only=True)
            ws = wb.active

            count = 0
            # B·∫Øt ƒë·∫ßu t·ª´ row 2 ƒë·ªÉ b·ªè header
            for row in ws.iter_rows(min_row=2, values_only=True):
                name = row[0]
                if name and str(name).strip():
                    Student.objects.get_or_create(name=str(name).strip(), classroom=room)
                    count += 1

            self.message_user(request, f"‚úÖ Imported {count} h·ªçc sinh v√†o l·ªõp {room.name}.",
                               level=messages.SUCCESS)
            return HttpResponseRedirect(f'../../{classroom_id}/change/')

        # GET: render form
        context = {
            **self.admin_site.each_context(request),
            'opts':     self.model._meta,
            'original': room,
            'title':    f'Import h·ªçc sinh cho l·ªõp ‚Äú{room.name}‚Äù',
        }
        return TemplateResponse(request, "admin/meals/import_students.html", context)

class StudentAdmin(admin.ModelAdmin):
    search_fields = ('name',)
    list_filter = ('classroom',)
    # ƒê·ªïi t√™n hi·ªÉn th·ªã c·ªßa model Student trong Admin
    verbose_name = "H·ªçc sinh"
    verbose_name_plural = "C√°c h·ªçc sinh"

class MealRecordAdmin(admin.ModelAdmin):
    change_list_template = "admin/meals/mealrecord/change_list.html"
    list_display = ('student', 'date', 'meal_type', 'status')
    fields = ('student','date','meal_type','status','non_eat','absence_reason')
    list_filter = ('date', 'meal_type')
    search_fields = ('student__name',)
    # ƒê·ªïi t√™n hi·ªÉn th·ªã c·ªßa model MealRecord trong Admin
    verbose_name = "B·ªØa ƒÉn"
    verbose_name_plural = "C√°c b·ªØa ƒÉn"

    def save_model(self, request, obj, form, change):
        existing_record = MealRecord.objects.filter(
             student=obj.student,
             date=obj.date,
             meal_type=obj.meal_type
         ).first()
        if existing_record:
            existing_record.status           = obj.status
            existing_record.non_eat          = obj.non_eat
            existing_record.absence_reason   = obj.absence_reason  # ‚Üê th√™m d√≤ng n√†y
            existing_record.save()
        else:
             super().save_model(request, obj, form, change)
        
        # X√°c ƒë·ªãnh chu·ªói "YYYY-MM" t·ª´ obj.date
        year_month = obj.date.strftime("%Y-%m")
        from .models import StudentPayment
        try:
            sp = StudentPayment.objects.get(student=obj.student, month=year_month)
            sp.save()  # g·ªçi model.save() s·∫Ω d√πng meal_price ƒë·ªÉ t√≠nh remaining_balance
        except StudentPayment.DoesNotExist:
            pass
        
class MealRecordAdminForm(forms.ModelForm):
    class Meta:
        model = MealRecord
        fields = '__all__'
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # 1) disable non_eat n·∫øu status="ƒê·ªß"
        if self.instance and self.instance.status == "ƒê·ªß":
            self.fields['non_eat'].disabled = True
        # 2) ·∫©n lu√¥n absence_reason n·∫øu non_eat==0
        if self.instance and self.instance.non_eat == 0:
            self.fields.pop('absence_reason', None)
admin.site.register(ClassRoom, ClassRoomAdmin)
admin.site.register(Student, StudentAdmin)
admin.site.register(MealRecord, MealRecordAdmin)
# Kh·ªüi t·∫°o site m·ªõi
my_admin_site = MyAdminSite(name='myadmin')

# ƒêƒÉng k√Ω c√°c model v·ªõi site m·ªõi
from .admin import MealRecordAdmin  # form tu·ª≥ ch·ªânh b·∫°n ƒë√£ c√≥
my_admin_site.register(MealRecord, MealRecordAdmin)
try:
    my_admin_site.unregister(ClassRoom)
    my_admin_site.unregister(Student)
    my_admin_site.unregister(StudentPayment)
except:
    pass
my_admin_site.register(StudentPayment, StudentPaymentAdmin)
# ƒëƒÉng k√Ω ClassRoomAdmin l√™n my_admin_site
my_admin_site.register(ClassRoom, ClassRoomAdmin)
my_admin_site.register(Student, StudentAdmin)
# ƒêƒÉng k√Ω th√™m StudentPayment n·∫øu mu·ªën
my_admin_site.register(User, UserAdmin)
my_admin_site.register(Group, GroupAdmin)
my_admin_site.register(MealPrice, MealPriceAdmin)