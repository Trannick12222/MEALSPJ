from django.contrib import admin
from django.contrib import admin
from django import forms
from django.contrib.admin import AdminSite
from .models import MealRecord, Student, ClassRoom, StudentPayment
from django.contrib.auth.models import User, Group
from django.contrib.auth.admin import UserAdmin, GroupAdmin
from django.http import HttpResponse, HttpResponseRedirect
from django.template.response import TemplateResponse
from django.urls import path
import csv
from django.urls import reverse
admin.site.site_header  = "Trang qu·∫£n tr·ªã b·ªØa ƒÉn h·ªçc sinh"
admin.site.site_title   = "Qu·∫£n l√Ω b·ªØa ƒÉn"
admin.site.index_title  = "B·∫£ng ƒëi·ªÅu khi·ªÉn"
class StudentInline(admin.TabularInline):
    model = Student
    extra = 0                 # kh√¥ng sinh form tr·ªëng
    fields = ('name',)        # ch·ªâ hi·ªán t√™n (c√≥ th·ªÉ th√™m c√°c field kh√°c)
    show_change_link = True   # c√≥ link v√†o form edit c·ªßa t·ª´ng student
class MyAdminSite(AdminSite):
    site_header = "Trang qu·∫£n tr·ªã b·ªØa ƒÉn h·ªçc sinh"
    index_title = "B·∫£ng ƒëi·ªÅu khi·ªÉn"

    def index(self, request, extra_context=None):
        extra_context = extra_context or {}
        # ƒê·ªï nhanh 2 link v√†o dashboard
        extra_context['quick_links'] = [
            {
                'url': reverse('meals:statistics'),
                'label': 'üìä Th·ªëng k√™'
            },
            {
                'url': reverse('meals:student_payment_edit'),
                'label': 'üí≥ Ch·ªânh s·ª≠a c√¥ng n·ª£'
            }
        ]
        return super().index(request, extra_context)

    # Tu·ª≥ √Ω b·∫°n c√≥ th·ªÉ override get_urls ƒë·ªÉ th√™m view custom,
    # nh∆∞ng ·ªü ƒë√¢y ch·ªâ c·∫ßn index.

class ClassNameFilter(admin.SimpleListFilter):
    title = 'L·ªõp h·ªçc'
    parameter_name = 'class_name'

    def lookups(self, request, model_admin):
        class_names = Student.objects.values_list('class_name', flat=True).distinct()
        return [(cls, cls) for cls in class_names if cls]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(class_name=self.value())
        return queryset

class ClassRoomAdmin(admin.ModelAdmin):
    list_display = ('name',)
    inlines = [StudentInline]  
    verbose_name = "L·ªõp h·ªçc"
    verbose_name_plural = "C√°c l·ªõp h·ªçc"
    change_form_template = "admin/meals/classroom_change_form.html"

    def get_urls(self):
        urls = super().get_urls()
        custom = [
            path(
                '<int:classroom_id>/delete_students/',
                self.admin_site.admin_view(self.delete_students_view),
                name='meals_classroom_delete_students'
            ),
            path(
                '<int:classroom_id>/export_students/',
                self.admin_site.admin_view(self.export_students_view),
                name='meals_classroom_export_students'
            ),
            path(
                '<int:classroom_id>/import_students/',
                self.admin_site.admin_view(self.import_students_view),
                name='meals_classroom_import_students'
            ),
        ]
        # ƒê·∫∑t custom URLs l√™n tr∆∞·ªõc ƒë·ªÉ kh√¥ng b·ªã ch·∫∑n b·ªüi m·∫∑c ƒë·ªãnh
        return custom + urls
    def delete_students_view(self, request, classroom_id):
        room = ClassRoom.objects.get(pk=classroom_id)
        if request.method == 'POST':
            # x√≥a t·∫•t c·∫£ sinh vi√™n trong l·ªõp, cascades lu√¥n MealRecord & StudentPayment
            qs = Student.objects.filter(classroom=room)
            count, _ = qs.delete()
            self.message_user(request, f"ƒê√£ x√≥a {count} h·ªçc sinh (v√† d·ªØ li·ªáu li√™n quan) c·ªßa l·ªõp {room.name}.")
            return HttpResponseRedirect(f'../../{classroom_id}/change/')

        context = {
            **self.admin_site.each_context(request),
            'opts':    self.model._meta,
            'original': room,
            'title':   f'X√°c nh·∫≠n x√≥a to√†n b·ªô h·ªçc sinh l·ªõp ‚Äú{room.name}‚Äù',
        }
        return TemplateResponse(request, "admin/meals/classroom_delete_students_confirmation.html", context)
    
    def export_students_view(self, request, classroom_id):
        """Xu·∫•t CSV c√°c h·ªçc sinh c·ªßa l·ªõp."""
        room = ClassRoom.objects.get(pk=classroom_id)
        qs = Student.objects.filter(classroom=room).order_by('name')

        resp = HttpResponse(content_type='text/csv')
        resp['Content-Disposition'] = f'attachment; filename="students_{room.name}.csv"'
        writer = csv.writer(resp)
        writer.writerow(['T√™n h·ªçc sinh'])
        for s in qs:
            writer.writerow([s.name])
        return resp

    def import_students_view(self, request, classroom_id):
        """Form upload CSV ƒë·ªÉ import h·ªçc sinh v√†o l·ªõp."""
        room = ClassRoom.objects.get(pk=classroom_id)

        if request.method == 'POST':
            csv_file = request.FILES.get('csv_file')
            if not csv_file:
                self.message_user(request, "Ch∆∞a ch·ªçn file.", level='error')
                return HttpResponseRedirect(request.path)
            decoded = csv_file.read().decode('utf-8').splitlines()
            reader = csv.reader(decoded)
            headers = next(reader, [])
            count = 0
            for row in reader:
                name = row[0].strip()
                if name:
                    Student.objects.get_or_create(name=name, classroom=room)
                    count += 1
            self.message_user(request, f"Imported {count} h·ªçc sinh v√†o l·ªõp {room.name}.")
            return HttpResponseRedirect(f'../../{classroom_id}/change/')

        context = {
            **self.admin_site.each_context(request),
            'opts':        self.model._meta,
            'original':    room,
            'title':       f'Import h·ªçc sinh cho l·ªõp ‚Äú{room.name}‚Äù',
        }
        return TemplateResponse(request, "admin/meals/import_students.html", context)

class StudentAdmin(admin.ModelAdmin):
    search_fields = ('name',)
    list_filter = ('classroom',)
    # ƒê·ªïi t√™n hi·ªÉn th·ªã c·ªßa model Student trong Admin
    verbose_name = "H·ªçc sinh"
    verbose_name_plural = "C√°c h·ªçc sinh"

class MealRecordAdmin(admin.ModelAdmin):
    change_list_template = "admin/meals/mealrecord/change_list.html"
    list_display = ('student', 'date', 'meal_type', 'status')
    fields = ('student','date','meal_type','status','non_eat','absence_reason')
    list_filter = ('date', 'meal_type')
    search_fields = ('student__name',)
    # ƒê·ªïi t√™n hi·ªÉn th·ªã c·ªßa model MealRecord trong Admin
    verbose_name = "B·ªØa ƒÉn"
    verbose_name_plural = "C√°c b·ªØa ƒÉn"

    def save_model(self, request, obj, form, change):
        """
        Tr∆∞·ªõc khi l∆∞u, ki·ªÉm tra xem ƒë√£ c√≥ MealRecord n√†o v·ªõi c√πng h·ªçc sinh, ng√†y v√† lo·∫°i b·ªØa ƒÉn ch∆∞a.
        N·∫øu c√≥, c·∫≠p nh·∫≠t l·∫°i status; n·∫øu kh√¥ng c√≥, t·∫°o m·ªõi.
        Sau ƒë√≥, s·ª≠ d·ª•ng c√¢u l·ªánh SQL m·ªôt d√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t remaining_balance c·ªßa StudentPayment t∆∞∆°ng ·ª©ng
        v·ªõi h·ªçc sinh v√† th√°ng c·ªßa obj.date theo c√¥ng th·ª©c:
        
        remaining_balance = amount_paid - tuition_fee - total_meal_charge + (remaining_balance th√°ng tr∆∞·ªõc, 0 n·∫øu kh√¥ng c√≥)
        
        Trong ƒë√≥ total_meal_charge ƒë∆∞·ª£c t√≠nh theo:
          - M·ªói b·ªØa s√°ng: 10
          - M·ªói b·ªØa tr∆∞a: n·∫øu daily_meal_fee = 30 th√¨ 20, n·∫øu = 40 th√¨ 30, n·∫øu kh√°c th√¨ (daily_meal_fee - 10)
        Ch·ªâ t√≠nh ti·ªÅn v·ªõi c√°c b·ªØa c√≥ status "ƒê·ªß" ho·∫∑c (status "Thi·∫øu" v√† non_eat = 2).
        """
        existing_record = MealRecord.objects.filter(
            student=obj.student,
            date=obj.date,
            meal_type=obj.meal_type
        ).first()

        if existing_record:
            existing_record.status = obj.status
            existing_record.non_eat = obj.non_eat  # C·∫≠p nh·∫≠t non_eat
            existing_record.save()
        else:
            super().save_model(request, obj, form, change)
        
        # X√°c ƒë·ªãnh chu·ªói "YYYY-MM" t·ª´ obj.date
        year_month = obj.date.strftime("%Y-%m")
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("UPDATE meals_studentpayment SET remaining_balance = amount_paid - tuition_fee - (SELECT COALESCE(SUM(CASE WHEN meal_type = 'B·ªØa s√°ng' AND (status = 'ƒê·ªß' OR (status = 'Thi·∫øu' AND non_eat = 2)) THEN 10000 WHEN meal_type = 'B·ªØa tr∆∞a' AND (status = 'ƒê·ªß' OR (status = 'Thi·∫øu' AND non_eat = 2)) THEN CASE WHEN meals_studentpayment.daily_meal_fee = 30000 THEN 20000 WHEN meals_studentpayment.daily_meal_fee = 40000 THEN 30000 ELSE meals_studentpayment.daily_meal_fee - 10000 END ELSE 0 END), 0) FROM meals_mealrecord WHERE meals_mealrecord.student_id = meals_studentpayment.student_id AND strftime('%%Y-%%m', meals_mealrecord.date) = meals_studentpayment.month) + COALESCE((SELECT sp_prev.remaining_balance FROM meals_studentpayment AS sp_prev WHERE sp_prev.student_id = meals_studentpayment.student_id AND sp_prev.month = strftime('%%Y-%%m', date(meals_studentpayment.month || '-01', '-1 month')) ORDER BY sp_prev.id DESC LIMIT 1), 0) WHERE student_id = %s AND month = %s;", [obj.student.id, year_month])
class MealRecordAdminForm(forms.ModelForm):
    class Meta:
        model = MealRecord
        fields = '__all__'
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # 1) disable non_eat n·∫øu status="ƒê·ªß"
        if self.instance and self.instance.status == "ƒê·ªß":
            self.fields['non_eat'].disabled = True
        # 2) ·∫©n lu√¥n absence_reason n·∫øu non_eat==0
        if self.instance and self.instance.non_eat == 0:
            self.fields.pop('absence_reason', None)
admin.site.register(ClassRoom, ClassRoomAdmin)
admin.site.register(Student, StudentAdmin)
admin.site.register(MealRecord, MealRecordAdmin)
# Kh·ªüi t·∫°o site m·ªõi
my_admin_site = MyAdminSite(name='myadmin')

# ƒêƒÉng k√Ω c√°c model v·ªõi site m·ªõi
from .admin import MealRecordAdmin  # form tu·ª≥ ch·ªânh b·∫°n ƒë√£ c√≥
my_admin_site.register(MealRecord, MealRecordAdmin)
my_admin_site.register(Student)
try:
    my_admin_site.unregister(ClassRoom)
except:
    pass

# ƒëƒÉng k√Ω ClassRoomAdmin l√™n my_admin_site
my_admin_site.register(ClassRoom, ClassRoomAdmin)
# ƒêƒÉng k√Ω th√™m StudentPayment n·∫øu mu·ªën
my_admin_site.register(StudentPayment)
my_admin_site.register(User, UserAdmin)
my_admin_site.register(Group, GroupAdmin)