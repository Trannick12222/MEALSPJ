from django.contrib import admin
from django.contrib import admin
from django import forms
from django.contrib.admin import AdminSite
from .models import MealRecord, Student, ClassRoom, StudentPayment,MealPrice,AuditLog
from django.contrib.auth.models import User, Group
from django.contrib.auth.admin import UserAdmin, GroupAdmin
from django.http import HttpResponse, HttpResponseRedirect
from django.template.response import TemplateResponse
from django.urls import path
from django.contrib import messages
from openpyxl import Workbook, load_workbook
import csv
from django.urls import reverse
import json
import openpyxl
from django.shortcuts import redirect,render
from django.shortcuts import render
from datetime import date, timedelta,datetime
from decimal import Decimal
from django.db.models import Q
from django_admin_listfilter_dropdown.filters import (
    DropdownFilter, RelatedDropdownFilter)
admin.site.site_header  = "Trang qu·∫£n tr·ªã b·ªØa ƒÉn h·ªçc sinh"
admin.site.site_title   = "Qu·∫£n l√Ω b·ªØa ƒÉn"
admin.site.index_title  = "B·∫£ng ƒëi·ªÅu khi·ªÉn"
class TermFilter(admin.SimpleListFilter):
    title            = 'H·ªçc k·ª≥/Ni√™n kho√°'
    parameter_name   = 'term'

    def lookups(self, request, model_admin):
        # L·∫•y t·∫•t c·∫£ c√°c term, order_by('-term') ƒë·ªÉ term m·ªõi nh·∫•t l√™n ƒë·∫ßu
        terms = (
            model_admin.model.objects
            .values_list('term', flat=True)
            .distinct()
            .order_by('-term')
        )
        return [(t, t) for t in terms]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(term=self.value())
        return queryset
class AuditLogMixin:
    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)
        AuditLog.objects.create(
            user=request.user,
            action='change' if change else 'add',
            path=request.path,
            data=json.dumps({
                'model': obj._meta.model_name,
                'object_id': obj.pk,
                'changes': form.changed_data,
            })
        )

    def delete_model(self, request, obj):
        AuditLog.objects.create(
            user=request.user,
            action='delete',
            path=request.path,
            data=json.dumps({
                'model': obj._meta.model_name,
                'object_id': obj.pk,
            })
        )
        super().delete_model(request, obj)
def log_admin_action(request, obj, action, extra=None):
    payload = {
        'model': obj._meta.model_name,  # <-- ƒë·ªïi t·ª´ .label th√†nh .model_name
        'object_id': obj.pk,
    }
    if extra:
        payload.update(extra)
    AuditLog.objects.create(
        user   = request.user,
        action = action,
        path   = request.path,
        data   = json.dumps(payload, ensure_ascii=False)
    )
class MealPriceAdmin( admin.ModelAdmin):
    list_display  = ('effective_date', 'daily_price', 'breakfast_price', 'lunch_price')
    list_editable = ('daily_price', 'breakfast_price', 'lunch_price')
    list_filter   = ('effective_date',)
    ordering      = ('-effective_date',)
    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)
        action = 'change' if change else 'add'
        disp   = f"C·∫•u h√¨nh gi√° ƒÉn - {obj.daily_price}"
        log_admin_action(request, obj, action, extra={
            'model':          'mealprice',
            'object_id':      obj.pk,
            'object_display': disp,
        })

    def delete_model(self, request, obj):
        disp = f"C·∫•u h√¨nh gi√° ƒÉn - {obj.daily_price}"
        log_admin_action(request, obj, 'delete', extra={
            'model':          'mealprice',
            'object_id':      obj.pk,
            'object_display': disp,
        })
        super().delete_model(request, obj)
class StudentInline(admin.TabularInline):
    model = Student
    extra = 0                 # kh√¥ng sinh form tr·ªëng
    fields = ('name',)        # ch·ªâ hi·ªán t√™n (c√≥ th·ªÉ th√™m c√°c field kh√°c)
    show_change_link = True   # c√≥ link v√†o form edit c·ªßa t·ª´ng student
class MyAdminSite(AdminSite):
    site_header = "Trang qu·∫£n tr·ªã b·ªØa ƒÉn h·ªçc sinh"
    index_title = "B·∫£ng ƒëi·ªÅu khi·ªÉn"

    def index(self, request, extra_context=None):
        extra_context = extra_context or {}
        # ƒê·ªï nhanh 2 link v√†o dashboard
        extra_context['quick_links'] = [
            {
                'url': reverse('meals:statistics'),
                'label': 'üìä Th·ªëng k√™'
            },
            {
                'url': reverse('meals:student_payment_edit'),
                'label': 'üí≥ Ch·ªânh s·ª≠a c√¥ng n·ª£'
            }
        ]
        return super().index(request, extra_context)

    # Tu·ª≥ √Ω b·∫°n c√≥ th·ªÉ override get_urls ƒë·ªÉ th√™m view custom,
    # nh∆∞ng ·ªü ƒë√¢y ch·ªâ c·∫ßn index.

class ClassNameFilter(admin.SimpleListFilter):
    title = 'L·ªõp h·ªçc'
    parameter_name = 'class_name'

    def lookups(self, request, model_admin):
        class_names = Student.objects.values_list('class_name', flat=True).distinct()
        return [(cls, cls) for cls in class_names if cls]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(class_name=self.value())
        return queryset
class StudentPaymentAdminForm(forms.ModelForm):
    class Meta:
        model = StudentPayment
        fields = '__all__'
        widgets = {
            # HTML5 month-picker
            'month': forms.TextInput(attrs={'type': 'month'}),
        }
        def validate_unique(self):
            # ch·ªâ gi·ªØ l·∫°i validate field-level (n·∫øu c√≥), skip to√†n b·ªô unique_together
            try:
                # g·ªçi b·∫£n g·ªëc, nh∆∞ng s·∫Ω kh√¥ng raise v√¨ ta ignore
                super().validate_unique()
            except forms.ValidationError:
                pass
from django.contrib.admin import SimpleListFilter

class StudentPaymentImportForm(forms.Form):
    month = forms.CharField(
        label="Th√°ng",
        widget=forms.TextInput(attrs={'type': 'month'})
    )
    classroom = forms.ModelChoiceField(
        queryset=ClassRoom.objects.all(),
        label="L·ªõp"
    )
    file = forms.FileField(label="File Excel")
class YearFilter(SimpleListFilter):
    title            = 'NƒÉm'
    parameter_name   = 'year'
    template         = 'django_admin_listfilter_dropdown/dropdown_filter.html'
    def lookups(self, request, model_admin):
        # L·∫•y t·∫≠p h·ª£p c√°c nƒÉm t·ª´ gi√° tr·ªã month ‚ÄúYYYY-MM‚Äù
        months = model_admin.model.objects.values_list('month', flat=True).distinct()
        years = sorted({m.split('-')[0] for m in months}, reverse=True)
        return [(y, y) for y in years]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(month__startswith=self.value() + '-')
        return queryset
class MonthFilter(SimpleListFilter):
    title            = 'Th√°ng'
    parameter_name   = 'month'
    template         = 'django_admin_listfilter_dropdown/dropdown_filter.html'
    def lookups(self, request, model_admin):
        year = request.GET.get('year')
        # ch·ªâ l·∫•y nh·ªØng month thu·ªôc nƒÉm ƒë√£ ch·ªçn (n·∫øu c√≥)
        months = model_admin.model.objects.values_list('month', flat=True).distinct()
        if year:
            months = [m for m in months if m.startswith(f"{year}-")]
        # chuy·ªÉn th√†nh list duy nh·∫•t, sort tƒÉng d·∫ßn
        unique = sorted({m for m in months})
        # tr·∫£ v·ªÅ tuple (value, label) ‚Äî ·ªü ƒë√¢y label ch·ªâ l·∫•y ph·∫ßn MM
        return [(m, m.split('-')[1]) for m in unique]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(month=self.value())
        return queryset       
class StudentPaymentAdmin(admin.ModelAdmin):

    form = StudentPaymentAdminForm
    list_display  = (
        'student',
        'month',
        'tuition_fee_fmt',
        'meal_price',            # n·∫øu ƒë√£ override __str__ l√† "YYYY-MM-DD ‚Üí X,000ƒë/ng√†y"
        'amount_paid_fmt',
        'remaining_balance_fmt',
    )
    search_fields = ('student__name','month')   # ‚Üê t√¨m theo t√™n h·ªçc sinh ho·∫∑c th√°ng
    change_list_template = "admin/meals/studentpayment_changelist.html"
    list_filter = (
        YearFilter,
        ('student__classroom', RelatedDropdownFilter),
        MonthFilter,
    ) 
    verbose_name  = "C√¥ng n·ª£ h·ªçc sinh"
    verbose_name_plural = "C√¥ng n·ª£ h·ªçc sinh"
    @admin.display(ordering='tuition_fee', description='H·ªçc ph√≠')
    def tuition_fee_fmt(self, obj):
        return f"{obj.tuition_fee:,.0f}"

    @admin.display(ordering='amount_paid', description='S·ªë ti·ªÅn ƒë√£ ƒë√≥ng')
    def amount_paid_fmt(self, obj):
        return f"{obj.amount_paid:,.0f}"

    @admin.display(ordering='remaining_balance', description='S·ªë d∆∞')
    def remaining_balance_fmt(self, obj):
        return f"{obj.remaining_balance:,.0f}"
    def save_model(self, request, obj, form, change):
        existing = StudentPayment.objects.filter(
            student=obj.student,
            month=obj.month
        ).exclude(pk=obj.pk).first()

        if existing:
            # ghi ƒë√® l√™n existing
            existing.tuition_fee    = obj.tuition_fee
            existing.meal_price     = obj.meal_price
            existing.amount_paid    = obj.amount_paid
            existing.save()
            self.message_user(request, f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t b·∫£n ghi {existing.id}.", level=messages.SUCCESS)
            target = existing
        else:
            super().save_model(request, obj, form, change)
            target = obj

        # always log both add & change
        action = 'change' if change else 'add'
        log_admin_action(request, target, action, extra={
            'student_name':   target.student.name,
            'classroom_name': target.student.classroom.name,
            'tuition_fee':    str(target.tuition_fee),
            'amount_paid':    str(target.amount_paid),
            'meal_price':     str(target.meal_price.daily_price) if target.meal_price else '',
            'month':          str(target.month),
            'changed_fields': form.changed_data,
        })
    def get_urls(self):
        urls = super().get_urls()
        custom = [
            path(
                'import-payments/',
                self.admin_site.admin_view(self.import_payments_view),
                name='meals_studentpayment_import'
            ),
        ]
        return custom + urls

    def import_payments_view(self, request):
        if request.method == 'POST':
            form = StudentPaymentImportForm(request.POST, request.FILES)
            if form.is_valid():
                month = form.cleaned_data['month']
                classroom = form.cleaned_data['classroom']
                wb = openpyxl.load_workbook(request.FILES['file'])
                sheet = wb.active

                overridden = []
                imported_count = 0

                for row in sheet.iter_rows(min_row=2, values_only=True):
                    student_name, raw_amount = row[:2]
                    if not student_name or raw_amount is None:
                        continue

                    # parse s·ªë ti·ªÅn (lo·∫°i b·ªè d·∫•u ph·∫©y n·∫øu c√≥)
                    amount = Decimal(str(raw_amount).replace(",", ""))

                    try:
                        stu = Student.objects.get(classroom=classroom, name=student_name.strip())
                    except Student.DoesNotExist:
                        # b·ªè qua nh·ªØng t√™n kh√¥ng kh·ªõp
                        continue

                    # ki·ªÉm tra overwrite
                    existed = StudentPayment.objects.filter(student=stu, month=month).exists()
                    if existed:
                        overridden.append(student_name)

                    # 1) X√°c ƒë·ªãnh meal_price_id  tuition_fee tr∆∞·ªõc
                    prior = (StudentPayment.objects
                            .filter(student=stu)
                            .exclude(month=month)
                            .order_by('-month')
                            .first())
                    if prior:
                        price_id, fee = prior.meal_price_id, prior.tuition_fee
                    else:
                        price_id, fee = 2, 0

                    # 2) T·∫°o m·ªõi ho·∫∑c update, g√°n lu√¥n c·∫£ price  fee trong defaults
                    sp, created = StudentPayment.objects.get_or_create(
                        student=stu,
                        month=month,
                        defaults={
                            'amount_paid':     amount,
                            'meal_price_id':   price_id,
                            'tuition_fee':     fee,
                        }
                    )
                    if not created:
                        sp.amount_paid     = amount
                        sp.meal_price_id   = price_id
                        sp.tuition_fee     = fee

                    # 3) L∆∞u, StudentPayment.save() c·ªßa b·∫°n s·∫Ω t√≠nh remaining_balance m√† kh√¥ng m·∫Øc l·ªói
                    sp.save()
                    imported_count += 1

                # Recalc to√†n b·ªô b·∫£ng (ƒë·∫£m b·∫£o c√°c th√°ng sau c≈©ng update ƒë√∫ng)
                all_pays = StudentPayment.objects.all().order_by('student__id','month')
                for p in all_pays:
                    p.save()

                if overridden:
                    self.message_user(
                        request,
                        f"S·∫Ω override d·ªØ li·ªáu c·ªßa: {', '.join(overridden)}",
                        level=messages.WARNING
                    )
                self.message_user(
                    request,
                    f"Import th√†nh c√¥ng {imported_count} b·∫£n ghi.",
                    level=messages.SUCCESS
                )
                return redirect('..')
        else:
            form = StudentPaymentImportForm()

        context = dict(
            self.admin_site.each_context(request),
            form=form,
            title="Import ti·ªÅn ƒë√£ ƒë√≥ng h·ªçc sinh"
        )
        return TemplateResponse(request, "admin/meals/import_payments.html", context)
    def delete_model(self, request, obj):
        log_admin_action(request, obj, 'delete', extra={
            'student_name':   obj.student.name,
            'classroom_name': obj.student.classroom.name,
            'tuition_fee':    str(obj.tuition_fee),
            'amount_paid':    str(obj.amount_paid),
            'meal_price':     str(obj.meal_price.daily_price) if obj.meal_price else '',
            'month':          str(obj.month),
        })
        super().delete_model(request, obj)
class ClassRoomAdmin( admin.ModelAdmin):
    list_display  = ('name', 'term')
    list_filter   = (TermFilter,)
    search_fields = ('name', 'term',)
    ordering     = ('-id',)
    inlines = [StudentInline]  
    verbose_name = "L·ªõp h·ªçc"
    verbose_name_plural = "C√°c l·ªõp h·ªçc"
    change_form_template = "admin/meals/classroom_change_form.html"
    def promote_students_choose_class_view(self, request, classroom_id):
        """
        B∆∞·ªõc 2: Sau khi ƒë√£ c√≥ danh s√°ch student_ids trong session,
        hi·ªÉn th·ªã form ch·ªçn l·ªõp ƒë√≠ch. Khi POST, clone Student v√† clone StudentPayment +
        MealRecord th√°ng g·∫ßn nh·∫•t, sau ƒë√≥ redirect v·ªÅ trang change c·ªßa l·ªõp g·ªëc.
        """

        source_room = ClassRoom.objects.get(pk=classroom_id)
        student_ids = request.session.get('promote_student_ids', [])

        if request.method == 'POST':
            target_class_id = request.POST.get('target_class_id')
            if not target_class_id:
                messages.error(request, "B·∫°n ph·∫£i ch·ªçn l·ªõp ƒë√≠ch.")
                return redirect(reverse('admin:meals_classroom_promote_choose_class',
                                        kwargs={'classroom_id': classroom_id}))
            try:
                target_room = ClassRoom.objects.get(pk=int(target_class_id))
            except (ValueError, ClassRoom.DoesNotExist):
                messages.error(request, "L·ªõp ƒë√≠ch kh√¥ng h·ª£p l·ªá.")
                return redirect(reverse('admin:meals_classroom_promote_choose_class',
                                        kwargs={'classroom_id': classroom_id}))

            # L·∫•y danh s√°ch Student c·∫ßn promote
            students_to_promote = Student.objects.filter(id__in=student_ids)
            new_students = []

            for old_student in students_to_promote:
                # 1) Clone Student (gi·ªØ c√°c field c∆° b·∫£n)
                new_student = Student.objects.create(
                    name=old_student.name,
                    classroom=target_room,
                    # N·∫øu Student c√≥ th√™m field nh∆∞ birthday, address..., copy t∆∞∆°ng ·ª©ng
                    # birthday=old_student.birthday,
                    # address=old_student.address,
                    # ...
                )
                new_students.append(new_student)

                # 2) L·∫•y StudentPayment g·∫ßn nh·∫•t c·ªßa old_student
                latest_payment = (
                    StudentPayment.objects
                    .filter(student=old_student)
                    .order_by('-month')
                    .first()
                )

                if latest_payment:
                    # 3) Clone t·∫°m StudentPayment ban ƒë·∫ßu (gi·ªØ nguy√™n t·∫•t c·∫£ fields)
                    new_payment = StudentPayment.objects.create(
                        student=new_student,
                        month=latest_payment.month,
                        tuition_fee=latest_payment.tuition_fee,
                        amount_paid=latest_payment.amount_paid,
                        remaining_balance=latest_payment.remaining_balance,
                        meal_price=latest_payment.meal_price
                    )

                    # 4) Clone t·∫•t c·∫£ MealRecord c·ªßa th√°ng g·∫ßn nh·∫•t t·ª´ old_student sang new_student
                    year_str, month_str = latest_payment.month.split('-')
                    year_int = int(year_str)
                    month_int = int(month_str)

                    meal_records = MealRecord.objects.filter(
                        student=old_student,
                        date__year=year_int,
                        date__month=month_int
                    )
                    for mr in meal_records:
                        MealRecord.objects.create(
                            student=new_student,
                            date=mr.date,
                            meal_type=mr.meal_type,
                            status=mr.status,
                            non_eat=mr.non_eat,
                            absence_reason=mr.absence_reason
                        )

                    # ----- (5) V·∫∂N RECALC CHO ƒê√öNG: ƒÇn h·ªçc = tuition_fee + spent_meals -----

                    # (i) T√≠nh spent_meals_new (t·ªïng ti·ªÅn ƒÉn c·ªßa new_student trong th√°ng ƒë√≥)
                    recs_new = MealRecord.objects.filter(
                        student=new_student,
                        date__year=year_int,
                        date__month=month_int,
                        meal_type__in=["B·ªØa s√°ng", "B·ªØa tr∆∞a"]
                    ).filter(
                        Q(status='ƒê·ªß') | Q(status='Thi·∫øu', non_eat=2)
                    )
                    fee_b = Decimal(new_payment.meal_price.breakfast_price)
                    fee_l = Decimal(new_payment.meal_price.lunch_price)
                    spent_meals_new = sum(
                        fee_b if r.meal_type == "B·ªØa s√°ng" else fee_l
                        for r in recs_new
                    )

                    # (ii) Mu·ªën gi·ªØ desired_remaining ƒë√∫ng b·∫±ng old_payment.remaining_balance
                    desired_remaining = latest_payment.remaining_balance

                    # (iii) C√¥ng th·ª©c recalc h·ªá th·ªëng: 
                    #      remaining_balance_new = amount_paid ‚àí (tuition_fee_new + spent_meals_new) + prior
                    #      v·ªõi prior = 0 (thanh to√°n ƒë·∫ßu th√°ng)
                    prior = Decimal('0')
                    new_tuition_fee = (
                        new_payment.amount_paid
                        - spent_meals_new
                        + prior
                        - desired_remaining
                    )

                    # (iv) G√°n l·∫°i tuition_fee v√† remaining_balance cho new_payment
                    new_payment.tuition_fee = new_tuition_fee
                    new_payment.remaining_balance = desired_remaining
                    new_payment.save()
                    # ----- K·∫æT TH√öC V·∫∂N RECALC -----

            # X√≥a session ƒë·ªÉ tr√°nh promote l·∫°i
            del request.session['promote_student_ids']

            messages.success(
                request,
                f"ƒê√£ t·∫°o {len(new_students)} h·ªçc sinh m·ªõi trong ‚Äú{target_room.name}‚Äù, gi·ªØ nguy√™n d·ªØ li·ªáu c≈©."
            )
            return redirect(reverse('admin:meals_classroom_change', args=(classroom_id,)))

        # N·∫øu GET: hi·ªÉn th·ªã form ch·ªçn l·ªõp ƒë√≠ch
        # 1Ô∏è‚É£ L·∫•y term t·ª´ GET ho·∫∑c m·∫∑c ƒë·ªãnh = term c·ªßa l·ªõp ngu·ªìn
        selected_term = request.GET.get('term', source_room.term)

        # 2Ô∏è‚É£ T·∫•t c·∫£ c√°c term hi·ªán c√≥ ƒë·ªÉ ƒë·ªï v√†o dropdown
        all_terms = (
            ClassRoom.objects
                    .values_list('term', flat=True)
                    .distinct()
                    .order_by('term')
        )

        # 3Ô∏è‚É£ L·ªçc ra ch·ªâ c√°c l·ªõp c√πng term, b·ªè l·ªõp ngu·ªìn
        target_rooms = (
            ClassRoom.objects
                    .filter(term=selected_term)
                    .exclude(pk=classroom_id)
                    .order_by('name')
        )

        context = {
            **self.admin_site.each_context(request),
            'opts':          self.model._meta,
            'original':      source_room,
            'all_terms':     all_terms,
            'selected_term': selected_term,
            'target_rooms':  target_rooms,
            'student_count': len(student_ids),
        }
        return render(request, "admin/meals/promote_students_choose_class.html", context)
    def promote_students_select_view(self, request, classroom_id):
        """
        B∆∞·ªõc 1: Show m·ªôt form list c√°c Student c·ªßa l·ªõp <classroom_id> v·ªõi checkbox.
        Khi submit (POST), redirect sang b∆∞·ªõc ch·ªçn l·ªõp ƒë√≠ch (choose_target_class).
        """
        room = ClassRoom.objects.get(pk=classroom_id)

        if request.method == 'POST':
            # L·∫•y danh s√°ch student_id ƒë√£ tick
            selected_ids = request.POST.getlist('students')
            if not selected_ids:
                messages.error(request, "B·∫°n ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt h·ªçc sinh ƒë·ªÉ l√™n l·ªõp.")
                return redirect(f'../../{classroom_id}/promote_students/')

            # Chuy·ªÉn sang b∆∞·ªõc 2, g·∫Øn student_ids v√†o session hay querystring
            # ·ªû ƒë√¢y m√¨nh s·∫Ω d√πng session ƒë·ªÉ t·∫°m gi·ªØ danh s√°ch.
            request.session['promote_student_ids'] = selected_ids
            return redirect(reverse('myadmin:meals_classroom_promote_choose_class',
                                     kwargs={'classroom_id': classroom_id}))

        # GET: hi·ªÉn th·ªã form ch·ª©a danh s√°ch student checkbox
        students_qs = Student.objects.filter(classroom=room).order_by('name')
        context = {
            **self.admin_site.each_context(request),
            'opts': self.model._meta,
            'original': room,
            'students': students_qs,
        }
        # Template s·∫Ω hi·ªÉn th·ªã checkbox list r·ªìi POST l·∫°i v·ªÅ ch√≠nh URL n√†y
        return render(request, "admin/meals/promote_students_select.html", context)
    def get_urls(self):
        urls = super().get_urls()
        custom = [
            path(
                '<int:classroom_id>/delete_students/',
                self.admin_site.admin_view(self.delete_students_view),
                name='meals_classroom_delete_students'
            ),
            path(
                '<int:classroom_id>/export_students/',
                self.admin_site.admin_view(self.export_students_view),
                name='meals_classroom_export_students'
            ),
            path(
                '<int:classroom_id>/import_students/',
                self.admin_site.admin_view(self.import_students_view),
                name='meals_classroom_import_students'
            ),
            path(
                '<int:classroom_id>/promote_students/',
                self.admin_site.admin_view(self.promote_students_select_view),
                name='meals_classroom_promote_students'
            ),
            path(
                '<int:classroom_id>/promote_students/choose_target_class/',
                self.admin_site.admin_view(self.promote_students_choose_class_view),
                name='meals_classroom_promote_choose_class'
                ),
        ]
        # ƒê·∫∑t custom URLs l√™n tr∆∞·ªõc ƒë·ªÉ kh√¥ng b·ªã ch·∫∑n b·ªüi m·∫∑c ƒë·ªãnh
        return custom + urls
    def delete_students_view(self, request, classroom_id):
        room = ClassRoom.objects.get(pk=classroom_id)
        if request.method == 'POST':
            # x√≥a t·∫•t c·∫£ sinh vi√™n trong l·ªõp, cascades lu√¥n MealRecord & StudentPayment
            qs = Student.objects.filter(classroom=room)
            count, _ = qs.delete()
            self.message_user(request, f"ƒê√£ x√≥a {count} h·ªçc sinh (v√† d·ªØ li·ªáu li√™n quan) c·ªßa l·ªõp {room.name}.")
            return HttpResponseRedirect(f'../../{classroom_id}/change/')

        context = {
            **self.admin_site.each_context(request),
            'opts':    self.model._meta,
            'original': room,
            'title':   f'X√°c nh·∫≠n x√≥a to√†n b·ªô h·ªçc sinh l·ªõp ‚Äú{room.name}‚Äù',
        }
        return TemplateResponse(request, "admin/meals/classroom_delete_students_confirmation.html", context)
    
    def export_students_view(self, request, classroom_id):
        room = ClassRoom.objects.get(pk=classroom_id)
        qs = Student.objects.filter(classroom=room).order_by('name')

        # T·∫°o workbook v√† sheet
        wb = Workbook()
        ws = wb.active
        ws.title = 'H·ªçc sinh'

        # Header
        ws.append(['T√™n h·ªçc sinh'])

        # D·ªØ li·ªáu
        for s in qs:
            ws.append([s.name])

        # Xu·∫•t file .xlsx
        response = HttpResponse(
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        filename = f"students_{room.name}.xlsx"
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        wb.save(response)
        return response
    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)
        action = 'change' if change else 'add'
        disp   = obj.name
        log_admin_action(request, obj, action, extra={
            'model':          'classroom',
            'object_id':      obj.pk,
            'object_display': disp,
        })

    def delete_model(self, request, obj):
        disp = obj.name
        log_admin_action(request, obj, 'delete', extra={
            'model':          'classroom',
            'object_id':      obj.pk,
            'object_display': disp,
        })
        super().delete_model(request, obj)
    def import_students_view(self, request, classroom_id):
        room = ClassRoom.objects.get(pk=classroom_id)

        if request.method == 'POST':
            excel_file = request.FILES.get('excel_file')
            if not excel_file:
                self.message_user(request, "‚ö†Ô∏è Ch∆∞a ch·ªçn file Excel.", level=messages.ERROR)
                return HttpResponseRedirect(request.path)

            # ƒê·ªçc workbook
            wb = load_workbook(filename=excel_file, read_only=True, data_only=True)
            ws = wb.active

            count = 0
            # B·∫Øt ƒë·∫ßu t·ª´ row 2 ƒë·ªÉ b·ªè header
            for row in ws.iter_rows(min_row=2, values_only=True):
                name = row[0]
                if name and str(name).strip():
                    Student.objects.get_or_create(name=str(name).strip(), classroom=room)
                    count += 1

            self.message_user(request, f"‚úÖ Imported {count} h·ªçc sinh v√†o l·ªõp {room.name}.",
                               level=messages.SUCCESS)
            return HttpResponseRedirect(f'../../{classroom_id}/change/')

        # GET: render form
        context = {
            **self.admin_site.each_context(request),
            'opts':     self.model._meta,
            'original': room,
            'title':    f'Import h·ªçc sinh cho l·ªõp ‚Äú{room.name}‚Äù',
        }
        return TemplateResponse(request, "admin/meals/import_students.html", context)

class StudentAdmin( admin.ModelAdmin):
    list_display = ('name','classroom')
    search_fields = ('name',)
    list_filter   = (
        ('classroom', RelatedDropdownFilter),
    )
    ordering        = ('-id',)
    # ƒê·ªïi t√™n hi·ªÉn th·ªã c·ªßa model Student trong Admin
    verbose_name = "H·ªçc sinh"
    verbose_name_plural = "C√°c h·ªçc sinh"
    def save_model(self, request, obj, form, change):
        super().save_model(request, obj, form, change)
        action = 'change' if change else 'add'
        disp   = f"{obj.name} - {obj.classroom.name}"
        log_admin_action(request, obj, action, extra={
            'model':          'student',
            'object_id':      obj.pk,
            'object_display': disp,
        })

    def delete_model(self, request, obj):
        disp = f"{obj.name} - {obj.classroom.name}"
        log_admin_action(request, obj, 'delete', extra={
            'model':          'student',
            'object_id':      obj.pk,
            'object_display': disp,
        })
        super().delete_model(request, obj)

class MealRecordAdmin( admin.ModelAdmin):
    change_list_template = "admin/meals/mealrecord/change_list.html"
    list_display = ('student', 'date', 'meal_type', 'status')
    fields = ('student','date','meal_type','status','non_eat','absence_reason')
    list_filter  = (
        ('date', DropdownFilter),
        ('student__classroom', RelatedDropdownFilter),
    )
    ordering = ('-date',)
    date_hierarchy = 'date'
    search_fields = ('student__name',)
    # ƒê·ªïi t√™n hi·ªÉn th·ªã c·ªßa model MealRecord trong Admin
    verbose_name = "B·ªØa ƒÉn"
    verbose_name_plural = "C√°c b·ªØa ƒÉn"
    def delete_model(self, request, obj):
        # L·∫•y lo·∫°i b·ªØa ƒÉn (S√°ng/Tr∆∞a)
        date_str = obj.date.strftime('%d/%m/%Y')
        mt       = obj.get_meal_type_display().replace('B·ªØa ', '').capitalize()
        disp = (
            f"B·∫£n ghi b·ªØa ƒÉn - {date_str} - "
            f"{obj.student.name} - {obj.student.classroom.name} - {mt}"
        )
        log_admin_action(request, obj, 'delete', extra={
            'model':          'mealrecord',
            'object_id':      obj.pk,
            'object_display': disp,
        })
        super().delete_model(request, obj)
    def save_model(self, request, obj, form, change):
        existing_record = MealRecord.objects.filter(
             student=obj.student,
             date=obj.date,
             meal_type=obj.meal_type
        ).first()
        if existing_record:
            existing_record.status         = obj.status
            existing_record.non_eat        = obj.non_eat
            existing_record.absence_reason = obj.absence_reason
            existing_record.save()
            target = existing_record
        else:
            super().save_model(request, obj, form, change)
            target = obj

        # log h√†nh ƒë·ªông b·ªØa ƒÉn (add/change)
        action = 'change' if change else 'add'
        # Format ng√†y th√†nh dd/mm/YYYY
        date_str = target.date.strftime('%d/%m/%Y')
        mt       = target.get_meal_type_display().replace('B·ªØa ', '').capitalize()
        disp = (
            f"B·∫£n ghi b·ªØa ƒÉn - {date_str} - "
            f"{target.student.name} - {target.student.classroom.name} - {mt}"
        )
        log_admin_action(request, target, action, extra={
            'model':          'mealrecord',
            'object_id':      target.pk,
            'object_display': disp,
        })
        
        # X√°c ƒë·ªãnh chu·ªói "YYYY-MM" t·ª´ obj.date
        year_month = obj.date.strftime("%Y-%m")
        from .models import StudentPayment
        try:
            sp = StudentPayment.objects.get(student=obj.student, month=year_month)
            sp.save()  # g·ªçi model.save() s·∫Ω d√πng meal_price ƒë·ªÉ t√≠nh remaining_balance
        except StudentPayment.DoesNotExist:
            pass
        
class MealRecordAdminForm(forms.ModelForm):
    class Meta:
        model = MealRecord
        fields = '__all__'
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # 1) disable non_eat n·∫øu status="ƒê·ªß"
        if self.instance and self.instance.status == "ƒê·ªß":
            self.fields['non_eat'].disabled = True
        # 2) ·∫©n lu√¥n absence_reason n·∫øu non_eat==0
        if self.instance and self.instance.non_eat == 0:
            self.fields.pop('absence_reason', None)
    
admin.site.register(ClassRoom, ClassRoomAdmin)
admin.site.register(Student, StudentAdmin)
admin.site.register(MealRecord, MealRecordAdmin)
# Kh·ªüi t·∫°o site m·ªõi
my_admin_site = MyAdminSite(name='myadmin')

# ƒêƒÉng k√Ω c√°c model v·ªõi site m·ªõi
from .admin import MealRecordAdmin  # form tu·ª≥ ch·ªânh b·∫°n ƒë√£ c√≥
my_admin_site.register(MealRecord, MealRecordAdmin)
try:
    my_admin_site.unregister(ClassRoom)
    my_admin_site.unregister(Student)
    my_admin_site.unregister(StudentPayment)
except:
    pass
@admin.register(AuditLog)
class AuditLogAdmin(admin.ModelAdmin):
    list_display = ('timestamp', 'user', 'action_vi', 'object_display')
    search_fields   = ('data',)
    readonly_fields = ('timestamp', 'user', 'action', 'path', 'data')
    ordering = ('-timestamp',)
    def action_vi(self, obj):
        return {
            'add':    'Th√™m',
            'change': 'S·ª≠a',
            'delete': 'X√≥a',
        }.get(obj.action, obj.action)
    action_vi.short_description = 'H√ÄNH ƒê·ªòNG'
    
    @admin.display(description='ƒê·ªêI T∆Ø·ª¢NG')
    def object_display(self, obj):
        info = json.loads(obj.data or '{}')
        # 1) N·∫øu view ƒë√£ push s·∫µn object_display th√¨ tr·∫£ lu√¥n
        if info.get('object_display'):
            return info['object_display']

        model = info.get('model')
        oid   = info.get('object_id')

        # 2) Student
        if model == 'student':
            stu = Student.objects.filter(pk=oid).first()
            return f"{stu.name} - {stu.classroom.name}" if stu else oid

        # 3) Classroom
        if model == 'classroom':
            cr = ClassRoom.objects.filter(pk=oid).first()
            return cr.name if cr else oid

        # 4) MealRecord
        if model == 'mealrecord':
            rec = MealRecord.objects.filter(pk=oid)\
                      .select_related('student','student__classroom')\
                      .first()
            if rec:
                mt = rec.get_meal_type_display().replace('B·ªØa ', '').capitalize()
                return f"B·∫£n ghi b·ªØa ƒÉn - {rec.student.name} - {rec.student.classroom.name} - {mt}"
            return oid

        # 5) StudentPayment ‚Äì parse v√† format s·ªë
        if model == 'studentpayment':
            s  = info.get('student_name','')
            c  = info.get('classroom_name','')
            t  = info.get('tuition_fee', '0')
            p  = info.get('amount_paid','0')
            m  = info.get('meal_price', '0')
            mo = info.get('month','')

            def fmt(x):
                try:
                    # n·∫øu x l√† chu·ªói s·ªë, convert r·ªìi format d·∫•u ph·∫©y
                    return f"{float(x):,.2f}"
                except:
                    return x

            return (
                f"Thanh To√°n - {s} - {c} - "
                f"{fmt(t)} - {fmt(p)} - {fmt(m)} - {mo}"
            )

        # 6) MealPrice
        if model == 'mealprice':
            price = MealPrice.objects.filter(pk=oid).first()
            return f"C·∫•u h√¨nh gi√° ƒÉn - {price.daily_price}" if price else oid

        return oid
my_admin_site.register(StudentPayment, StudentPaymentAdmin)
# ƒëƒÉng k√Ω ClassRoomAdmin l√™n my_admin_site
my_admin_site.register(ClassRoom, ClassRoomAdmin)
my_admin_site.register(Student, StudentAdmin)
# ƒêƒÉng k√Ω th√™m StudentPayment n·∫øu mu·ªën
my_admin_site.register(User, UserAdmin)
my_admin_site.register(Group, GroupAdmin)
my_admin_site.register(MealPrice, MealPriceAdmin)
my_admin_site.register(AuditLog, AuditLogAdmin)